// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.20.1
// source: followerlist.proto

package pb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// FollowerlistClient is the client API for Followerlist service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type FollowerlistClient interface {
	GetFollowerlist(ctx context.Context, in *DouyinRelationFollowerListRequest, opts ...grpc.CallOption) (*DouyinRelationFollowerListResponse, error)
}

type followerlistClient struct {
	cc grpc.ClientConnInterface
}

func NewFollowerlistClient(cc grpc.ClientConnInterface) FollowerlistClient {
	return &followerlistClient{cc}
}

func (c *followerlistClient) GetFollowerlist(ctx context.Context, in *DouyinRelationFollowerListRequest, opts ...grpc.CallOption) (*DouyinRelationFollowerListResponse, error) {
	out := new(DouyinRelationFollowerListResponse)
	err := c.cc.Invoke(ctx, "/douyin.extra.followerlist.Followerlist/GetFollowerlist", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// FollowerlistServer is the server API for Followerlist service.
// All implementations must embed UnimplementedFollowerlistServer
// for forward compatibility
type FollowerlistServer interface {
	GetFollowerlist(context.Context, *DouyinRelationFollowerListRequest) (*DouyinRelationFollowerListResponse, error)
	mustEmbedUnimplementedFollowerlistServer()
}

// UnimplementedFollowerlistServer must be embedded to have forward compatible implementations.
type UnimplementedFollowerlistServer struct {
}

func (UnimplementedFollowerlistServer) GetFollowerlist(context.Context, *DouyinRelationFollowerListRequest) (*DouyinRelationFollowerListResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetFollowerlist not implemented")
}
func (UnimplementedFollowerlistServer) mustEmbedUnimplementedFollowerlistServer() {}

// UnsafeFollowerlistServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to FollowerlistServer will
// result in compilation errors.
type UnsafeFollowerlistServer interface {
	mustEmbedUnimplementedFollowerlistServer()
}

func RegisterFollowerlistServer(s grpc.ServiceRegistrar, srv FollowerlistServer) {
	s.RegisterService(&Followerlist_ServiceDesc, srv)
}

func _Followerlist_GetFollowerlist_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DouyinRelationFollowerListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FollowerlistServer).GetFollowerlist(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/douyin.extra.followerlist.Followerlist/GetFollowerlist",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FollowerlistServer).GetFollowerlist(ctx, req.(*DouyinRelationFollowerListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Followerlist_ServiceDesc is the grpc.ServiceDesc for Followerlist service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Followerlist_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "douyin.extra.followerlist.Followerlist",
	HandlerType: (*FollowerlistServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetFollowerlist",
			Handler:    _Followerlist_GetFollowerlist_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "followerlist.proto",
}
