// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.20.1
// source: followlist.proto

package pb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// FollowlistClient is the client API for Followlist service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type FollowlistClient interface {
	GetFollowlist(ctx context.Context, in *DouyinRelationFollowListRequest, opts ...grpc.CallOption) (*DouyinRelationFollowListResponse, error)
}

type followlistClient struct {
	cc grpc.ClientConnInterface
}

func NewFollowlistClient(cc grpc.ClientConnInterface) FollowlistClient {
	return &followlistClient{cc}
}

func (c *followlistClient) GetFollowlist(ctx context.Context, in *DouyinRelationFollowListRequest, opts ...grpc.CallOption) (*DouyinRelationFollowListResponse, error) {
	out := new(DouyinRelationFollowListResponse)
	err := c.cc.Invoke(ctx, "/douyin.extra.followlist.Followlist/GetFollowlist", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// FollowlistServer is the server API for Followlist service.
// All implementations must embed UnimplementedFollowlistServer
// for forward compatibility
type FollowlistServer interface {
	GetFollowlist(context.Context, *DouyinRelationFollowListRequest) (*DouyinRelationFollowListResponse, error)
	mustEmbedUnimplementedFollowlistServer()
}

// UnimplementedFollowlistServer must be embedded to have forward compatible implementations.
type UnimplementedFollowlistServer struct {
}

func (UnimplementedFollowlistServer) GetFollowlist(context.Context, *DouyinRelationFollowListRequest) (*DouyinRelationFollowListResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetFollowlist not implemented")
}
func (UnimplementedFollowlistServer) mustEmbedUnimplementedFollowlistServer() {}

// UnsafeFollowlistServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to FollowlistServer will
// result in compilation errors.
type UnsafeFollowlistServer interface {
	mustEmbedUnimplementedFollowlistServer()
}

func RegisterFollowlistServer(s grpc.ServiceRegistrar, srv FollowlistServer) {
	s.RegisterService(&Followlist_ServiceDesc, srv)
}

func _Followlist_GetFollowlist_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DouyinRelationFollowListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FollowlistServer).GetFollowlist(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/douyin.extra.followlist.Followlist/GetFollowlist",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FollowlistServer).GetFollowlist(ctx, req.(*DouyinRelationFollowListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Followlist_ServiceDesc is the grpc.ServiceDesc for Followlist service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Followlist_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "douyin.extra.followlist.Followlist",
	HandlerType: (*FollowlistServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetFollowlist",
			Handler:    _Followlist_GetFollowlist_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "followlist.proto",
}
