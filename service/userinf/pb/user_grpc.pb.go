// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package pb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// UserInfClient is the client API for UserInf service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type UserInfClient interface {
	GetUserinf(ctx context.Context, in *DouyinUserRequest, opts ...grpc.CallOption) (*DouyinUserResponse, error)
}

type userInfClient struct {
	cc grpc.ClientConnInterface
}

func NewUserInfClient(cc grpc.ClientConnInterface) UserInfClient {
	return &userInfClient{cc}
}

func (c *userInfClient) GetUserinf(ctx context.Context, in *DouyinUserRequest, opts ...grpc.CallOption) (*DouyinUserResponse, error) {
	out := new(DouyinUserResponse)
	err := c.cc.Invoke(ctx, "/douyin.core.userinf.UserInf/GetUserinf", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// UserInfServer is the server API for UserInf service.
// All implementations must embed UnimplementedUserInfServer
// for forward compatibility
type UserInfServer interface {
	GetUserinf(context.Context, *DouyinUserRequest) (*DouyinUserResponse, error)
	mustEmbedUnimplementedUserInfServer()
}

// UnimplementedUserInfServer must be embedded to have forward compatible implementations.
type UnimplementedUserInfServer struct {
}

func (UnimplementedUserInfServer) GetUserinf(context.Context, *DouyinUserRequest) (*DouyinUserResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetUserinf not implemented")
}
func (UnimplementedUserInfServer) mustEmbedUnimplementedUserInfServer() {}

// UnsafeUserInfServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to UserInfServer will
// result in compilation errors.
type UnsafeUserInfServer interface {
	mustEmbedUnimplementedUserInfServer()
}

func RegisterUserInfServer(s grpc.ServiceRegistrar, srv UserInfServer) {
	s.RegisterService(&UserInf_ServiceDesc, srv)
}

func _UserInf_GetUserinf_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DouyinUserRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserInfServer).GetUserinf(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/douyin.core.userinf.UserInf/GetUserinf",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserInfServer).GetUserinf(ctx, req.(*DouyinUserRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// UserInf_ServiceDesc is the grpc.ServiceDesc for UserInf service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var UserInf_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "douyin.core.userinf.UserInf",
	HandlerType: (*UserInfServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetUserinf",
			Handler:    _UserInf_GetUserinf_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "user.proto",
}
